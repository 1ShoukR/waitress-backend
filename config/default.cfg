"""
This is the default config that should be loaded for all apps, 
then overridden as needed.

Do NOT place actual secret key strings of any kind in here. 
Instead make them environment variables, or for local use place them in local.cfg
"""
import os
from pytz import timezone
from pathlib import Path

DEBUG = False # NOTE this no longer controls Flask's actual debug flag. That is controlled (only in local mode) by .flaskenv
LOCAL_MODE = False
SCHEME = 'https'
PREFERRED_URL_SCHEME = 'https'
PORT = 5000 # This is flask's default (it doesn't really effect anything in production)
DOMAIN = os.environ.get('DOMAIN', 'www.yourproject.com') # CHANGEME
ROOT_URL = f'www.{DOMAIN}' # Root URL of running application, including subdomain but not protocol/scheme
DEV_ENV = bool(int(os.environ.get('DEV_ENV', 0))) # May be used in projects that have a testing/staging environment in addition to production
SECRET_KEY = os.environ.get('FLASK_SECRET_KEY')
SQLALCHEMY_TRACK_MODIFICATIONS = False
REPO_ROOT = Path(__file__).parent.parent # Don't change this (unless this file is moved)


"""
DATABASE
"""


DB_HOST = os.environ.get('MYSQL_DB_HOST', 'localhost')
DB_PORT = os.environ.get('MYSQL_DB_PORT', 3306)
DB_USER = os.environ.get('MYSQL_DB_USER', '')
DB_PASS = os.environ.get('MYSQL_DB_PSWD', '')
DB_NAME = os.environ.get('MYSQL_DB_NAME', '')
SQLALCHEMY_DATABASE_URI = 'mysql+pymysql://{0}:{1}@{2}:{3}/{4}?charset=utf8mb4'.format(DB_USER, DB_PASS, DB_HOST, DB_PORT, DB_NAME)


"""
AWS
"""


AWS_DEFAULT_BUCKET = os.environ.get('AWS_DEFAULT_BUCKET')
AWS_ACCESS_KEY = os.environ.get('AWS_ACCESS_KEY')
AWS_SECRET_KEY = os.environ.get('AWS_SECRET_KEY')
AWS_CLOUDFRONT_DISTRIBUTION_ID = os.environ.get('AWS_CLOUDFRONT_DISTRIBUTION_ID')
AWS_CLOUDFRONT_REGION = os.environ.get('AWS_CLOUDFRONT_REGION')
CLOUDFRONT_CACHE_SIGNED_URLS = bool(int(os.environ.get('CLOUDFRONT_CACHE_SIGNED_URLS', 1)))


"""
CLOUDFLARE
"""


# Uncomment if needed
# CLOUDFLARE_API_KEY = os.environ.get('CLOUDFLARE_API_KEY')
# CLOUDFLARE_EMAIL = os.environ.get('CLOUDFLARE_EMAIL')


"""
EMAIL
"""


SENDGRID_API_KEY = os.environ.get('SENDGRID_API_KEY')

SYSTEM_EMAIL = f'noreply@{DOMAIN}'     # The 'from' email of auto-notification emails
DEFAULT_EMAIL = 'developers@two.fish'  # All emails sent out in local mode will go to this email
DEV_EMAIL = 'developers@two.fish'      # Email to which to send error reports, logs, etc.
OVERRIDE_ALL_EMAIL = os.environ.get('OVERRIDE_ALL_EMAIL', None)
CONTACT_SUBMISSION_TO_EMAIL = 'info@two.fish'


"""
SMS
"""

# Uncomment if needed
# TWILIO_SID = os.environ.get('TWILIO_SID')
# TWILIO_AUTH_TOKEN = os.environ.get('TWILIO_AUTH_TOKEN')
# TWILIO_NUMBER = os.environ.get('TWILIO_NUMBER')
# TWILIO_HEADER = os.environ.get('TWILIO_HEADER')


"""
BACKUP
"""


BACKUP_API_KEY = os.environ.get('BACKUP_API_KEY', '')
BACKUP_AWS_BUCKET = os.environ.get('BACKUP_AWS_BUCKET', '')
WEBSITE_NAME = os.environ.get('WEBSITE_NAME', '')


"""
CUSTOM KEYS
"""


CRYPTO_KEY = os.environ.get('CRYPTO_KEY') # Used for encryption of values saved to DB
INTERNAL_API_KEY = os.environ.get('INTERNAL_API_KEY') # Used for internal cross-requests (e.g. made from a cron server to the webapp server)


"""
MISC
"""

# All datetimes are saved as UTC, but for display, times will be converted to this timezone by default
TIMEZONE = timezone('US/Eastern')

# Appears in <title>, email copy, etc. 
# Use this value instead of hardcoding the website name anywhere so 
# capitalization/spacing/etc. can be consistent and controlled from a single place.
BRANDING = os.environ.get('BRANDING', 'FlaskTemplate')  # CHANGEME

# Two-factor auth timeout, in seconds.
# After this amount of time a two-factor code is rejected, even if valid.
# TFA_TIMEOUT = os.environ.get('TFA_TIMEOUT', 600) # Default 10 minutes
